import { ArgumentsHost, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';
import { Response } from 'express';

// Catches exceptions generated by the class-validator decorators, and add the errors to the query for rendering
export class BadFormRequestFilter implements ExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest<Request>();

    let errors = (exception as any).response.message.join('<br />');
    console.log(exception)
    let body = (request as any).body;

    if (exception.getStatus() == HttpStatus.BAD_REQUEST) {
      let [_, module, action] = request.url.split('/');
      if (module == 'new-comment') {
        response.redirect(`/ticket/${body.ticketToken}?errors=${errors}`);
      } else {
        if (module == 'ticket') body.id = action;

        response.redirect(
          `/admin/${module}/${
            action == 'edit' || module == 'ticket' ? body.id : 'new'
          }?errors=${errors}`
        );
      }
    }
  }
}
